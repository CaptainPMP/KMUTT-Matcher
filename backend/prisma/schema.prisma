// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model User {
  id          Int    @id @default(autoincrement())
  email       String    @unique
  password    String
  full_name   String
  gender      String?
  birth_date  DateTime?
  description String?
  pic         String    @default("https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  socialmedia Socialmedia?
  mbti        Mbti?
  groups      GroupUser[] // Change here to use the junction table
}

model Socialmedia {
  id        Int    @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int     @unique
  line      String?     
  facebook  String?     
  instagram String?    
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Mbti {
  id        Int    @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int    @unique
  Ne        Int?
  Ni        Int?
  Te        Int?
  Ti        Int?
  Se        Int?
  Si        Int?
  Fe        Int?
  Fi        Int?
  Type      String?
  Enneagram String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id               Int    @id @default(autoincrement())
  group_name       String    
  group_description String?
  admin_id         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  users            GroupUser[] // Change here to use the junction table
}

model GroupUser {
  id        Int   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int   
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int  
  isAdmin   Boolean  @default(false) // New field to indicate admin status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
